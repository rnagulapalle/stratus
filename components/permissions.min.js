!function(root,factory){"function"==typeof define&&define.amd?define(["stratus","underscore","jquery","angular","angular-material","stratus.services.utility"],factory):factory(root.Stratus,root._,root.jQuery,root.angular)}(this,function(Stratus,_,jQuery,angular){Stratus.Components.Permissions={bindings:{permissionId:"<",ngModel:"=",identityUser:"="},controller:function($scope,$timeout,$attrs,$http,utility){utility.componentInitializer(this,$scope,$attrs,"permissions",!0);var $ctrl=this;function persistContentData(data,contentSelected){"Content"===$scope.contentSelected.type?data.assetId=$scope.contentSelected.version.meta.id:data.assetId=$scope.contentSelected.id,data.asset=$scope.contentSelected.assetType}$scope.permissionSelected=[],$scope.complete=!1,$scope.newPermission={timeEdit:(new Date).getTime()},$scope.allowSelectUser=!$ctrl.identityUser,$scope.permissions=[{value:1,name:"View"},{value:2,name:"Create"},{value:4,name:"Edit"},{value:8,name:"Delete"},{value:16,name:"Publish"},{value:32,name:"Design"},{value:64,name:"Dev"},{value:128,name:"Master"}],$scope.userRoleSelected=null,$scope.updateUserRole=null,$scope.contentSelected=null,$scope.updateContent=null,$scope.$watch("$ctrl.permissionId",function(permissionId){void 0!==permissionId&&$scope.getPermission(permissionId)}),$scope.$watch("$ctrl.ngModel",function(){$ctrl.identityUser&&$ctrl.ngModel&&($scope.allowSelectUser=!1,$scope.newPermission.identityUser={id:$ctrl.ngModel.id,bestName:$ctrl.ngModel.bestName},$scope.userRoleSelected=$scope.newPermission.identityUser,$ctrl.ngModel.permissions||($ctrl.ngModel.permissions=[]))}),$scope.$watchGroup(["contentSelected","permissionSelected"],function(){$ctrl.identityUser&&$scope.userRoleSelected&&$ctrl.ngModel&&$ctrl.ngModel.permissions&&(_.last($ctrl.ngModel.permissions)&&!_.last($ctrl.ngModel.permissions).hasOwnProperty("id")&&$ctrl.ngModel.permissions.splice($ctrl.ngModel.permissions.length-1,1),$scope.contentSelected&&$scope.permissionSelected.length>0&&$ctrl.ngModel.permissions.push($scope.newPermission))}),$scope.getPermission=function(permissionId){return utility.sendRequest(null,"GET","/Api/Permission/"+permissionId).then(function(response){if(response){var data=response.data.payload,permissions=data.summary;angular.forEach(permissions,function(permission,index){(index=$scope.permissions.findIndex(function(x){return x.name===permission}))>-1&&$scope.permissionSelected.push($scope.permissions[index].value)}),$ctrl.ngModel.permissions=$scope.permissionSelected,$scope.userRoleSelected=data.identityRole?data.identityRole:data.identityUser,$scope.updateUserRole=data.identityRole?data.identityRole:data.identityUser,$scope.updateContent={name:data.assetContent,assetType:data.asset,id:data.assetId}}},function(response){console.log("response error",response)})},$scope.identityQuery=function(query){return utility.sendRequest(null,"GET","/Api/User?options[type]=collection&p=1&q="+query).then(function(response){if(response.hasOwnProperty("data")&&response.data.hasOwnProperty("payload")){var value=response.data.payload,results=[];return value.User&&(value.User.name+=" - "+value.User.id,results=results.concat(value.User)),value.Role&&(value.Role.bestName+=" - "+value.Role.id,results=results.concat(value.Role)),value.User||value.Role||(value.name?value.name+=" - "+value.id:value.bestName&&(value.bestName+=" - "+value.id),results=results.concat(value)),console.log("results",results),results}},function(error){console.error(error)})},$scope.contentQuery=function(query){return utility.sendRequest(null,"GET","/Api/Content?options[type]=collection&p=1&q="+query).then(function(response){if(response.hasOwnProperty("data")&&response.data.hasOwnProperty("payload")){var value=response.data.payload,results=[];return value.Bundle&&(angular.forEach(value.Bundle,function(bundle,index){value.Bundle[index].type="Bundle",value.Bundle[index].assetType="SitetheoryContentBundle:Bundle"}),results=results.concat(value.Bundle)),value.Content&&(angular.forEach(value.Content,function(content,index){value.Content[index].type="Content",content.hasOwnProperty("contentType")&&content.contentType.hasOwnProperty("bundle")&&content.contentType.bundle.hasOwnProperty("name")&&(value.Content[index].assetType="Sitetheory"+content.contentType.bundle.name+"Bundle:"+content.contentType.entity)}),results=results.concat(value.Content)),value.ContentType&&(angular.forEach(value.ContentType,function(contentType,index){value.ContentType[index].type="ContentType",value.ContentType[index].assetType="SitetheoryContentBundle:ContentType"}),results=results.concat(value.ContentType)),value.Bundle||value.Content||value.ContentType||(results=results.concat(value)),console.log("results",results),results}},function(error){console.error(error)})},$scope.selectedUserRoleChange=function(item){$scope.userRoleSelected=item,$ctrl.identityUser||($scope.userRoleSelected&&$scope.userRoleSelected.name?($ctrl.ngModel.identityRole=item,$ctrl.ngModel.identityUser=null):($ctrl.ngModel.identityRole=null,$ctrl.ngModel.identityUser=item))},$scope.selectedContentChange=function(content){$scope.contentSelected=content,$ctrl.identityUser?persistContentData($scope.newPermission,content):persistContentData($ctrl.ngModel,content)},$scope.processSelectAction=function(){var data;-1===$scope.permissionSelected.indexOf(128)&&$scope.permissionSelected.length!==$scope.permissions.length-1||($scope.permissionSelected=[$scope.permissions[$scope.permissions.length-1].value]),data=$ctrl.identityUser?$scope.newPermission:$ctrl.ngModel,$scope.permissionSelected.length>0&&angular.forEach($scope.permissionSelected,function(permission){data.permissions|=permission})},$scope.selectedIdentify=function(item){return(item.name||item.bestName)+" - "+item.id},$scope.selectedContent=function(item){var data=null;return item.version?data=item.version+" - "+item.version.meta.id:item.name&&(data=item.name+" - "+item.id),data}},templateUrl:Stratus.BaseUrl+Stratus.BundlePath+"components/permissions"+(Stratus.Environment.get("production")?".min":"")+".html"}});